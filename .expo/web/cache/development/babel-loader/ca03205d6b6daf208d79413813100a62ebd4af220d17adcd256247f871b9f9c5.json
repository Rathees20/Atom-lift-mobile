{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState, useEffect } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport LoginScreen from \"./src/screens/LoginScreen\";\nimport HomeScreen from \"./src/screens/HomeScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoggedIn = _useState2[0],\n    setIsLoggedIn = _useState2[1];\n  useEffect(function () {\n    setIsLoggedIn(false);\n  }, []);\n  var handleLogin = function handleLogin() {\n    setIsLoggedIn(true);\n  };\n  var handleLogout = function handleLogout() {\n    setIsLoggedIn(false);\n  };\n  return _jsx(NavigationContainer, {\n    children: _jsx(Stack.Navigator, {\n      screenOptions: {\n        headerShown: false\n      },\n      children: !isLoggedIn ? _jsx(Stack.Screen, {\n        name: \"Login\",\n        children: function children(props) {\n          return _jsx(LoginScreen, _objectSpread(_objectSpread({}, props), {}, {\n            onLogin: handleLogin\n          }));\n        }\n      }) : _jsx(Stack.Screen, {\n        name: \"Home\",\n        children: function children(props) {\n          return _jsx(HomeScreen, _objectSpread(_objectSpread({}, props), {}, {\n            onLogout: handleLogout\n          }));\n        }\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","useState","useEffect","NavigationContainer","createStackNavigator","LoginScreen","HomeScreen","jsx","_jsx","Stack","App","_useState","_useState2","_slicedToArray","isLoggedIn","setIsLoggedIn","handleLogin","handleLogout","children","Navigator","screenOptions","headerShown","Screen","name","props","_objectSpread","onLogin","onLogout"],"sources":["D:/Download/Atom lift mobile app/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport LoginScreen from './src/screens/LoginScreen';\r\nimport HomeScreen from './src/screens/HomeScreen';\r\nimport { RootStackParamList } from './types';\r\n\r\nconst Stack = createStackNavigator<RootStackParamList>();\r\n\r\nexport default function App(): JSX.Element {\r\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    // Check if user is already logged in (you can implement your own logic here)\r\n    // For now, we'll start with login screen\r\n    setIsLoggedIn(false);\r\n  }, []);\r\n\r\n  const handleLogin = (): void => {\r\n    setIsLoggedIn(true);\r\n  };\r\n\r\n  const handleLogout = (): void => {\r\n    setIsLoggedIn(false);\r\n  };\r\n\r\n  return (\r\n    <NavigationContainer>\r\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\r\n        {!isLoggedIn ? (\r\n          <Stack.Screen name=\"Login\">\r\n            {(props) => <LoginScreen {...props} onLogin={handleLogin} />}\r\n          </Stack.Screen>\r\n        ) : (\r\n          <Stack.Screen name=\"Home\">\r\n            {(props) => <HomeScreen {...props} onLogout={handleLogout} />}\r\n          </Stack.Screen>\r\n        )}\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,oBAAoB,QAAQ,yBAAyB;AAC9D,OAAOC,WAAW;AAClB,OAAOC,UAAU;AAAiC,SAAAC,GAAA,IAAAC,IAAA;AAGlD,IAAMC,KAAK,GAAGL,oBAAoB,CAAqB,CAAC;AAExD,eAAe,SAASM,GAAGA,CAAA,EAAgB;EACzC,IAAAC,SAAA,GAAoCV,QAAQ,CAAU,KAAK,CAAC;IAAAW,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArDG,UAAU,GAAAF,UAAA;IAAEG,aAAa,GAAAH,UAAA;EAEhCV,SAAS,CAAC,YAAM;IAGda,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAe;IAC9BD,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,IAAME,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAe;IAC/BF,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,OACEP,IAAA,CAACL,mBAAmB;IAAAe,QAAA,EAClBV,IAAA,CAACC,KAAK,CAACU,SAAS;MAACC,aAAa,EAAE;QAAEC,WAAW,EAAE;MAAM,CAAE;MAAAH,QAAA,EACpD,CAACJ,UAAU,GACVN,IAAA,CAACC,KAAK,CAACa,MAAM;QAACC,IAAI,EAAC,OAAO;QAAAL,QAAA,EACvB,SAAAA,SAACM,KAAK;UAAA,OAAKhB,IAAA,CAACH,WAAW,EAAAoB,aAAA,CAAAA,aAAA,KAAKD,KAAK;YAAEE,OAAO,EAAEV;UAAY,EAAE,CAAC;QAAA;MAAA,CAChD,CAAC,GAEfR,IAAA,CAACC,KAAK,CAACa,MAAM;QAACC,IAAI,EAAC,MAAM;QAAAL,QAAA,EACtB,SAAAA,SAACM,KAAK;UAAA,OAAKhB,IAAA,CAACF,UAAU,EAAAmB,aAAA,CAAAA,aAAA,KAAKD,KAAK;YAAEG,QAAQ,EAAEV;UAAa,EAAE,CAAC;QAAA;MAAA,CACjD;IACf,CACc;EAAC,CACC,CAAC;AAE1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}